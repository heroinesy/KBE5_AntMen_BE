plugins {
	id 'base'
	id 'org.springframework.boot' version '3.3.1' apply false
	id 'io.spring.dependency-management' version '1.1.5' apply false
}

subprojects {
	// 모든 모듈에 공통으로 적용
	apply plugin: 'java'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'

	group = 'com.antmeantwork'
	version = '0.0.1-SNAPSHOT'
	sourceCompatibility = '17'

	repositories {
		mavenCentral()
	}

	dependencies {
		// springboot
		implementation 'org.springframework.boot:spring-boot-starter-web'
		testImplementation 'org.springframework.boot:spring-boot-starter-test'
		// lombok
		implementation 'org.projectlombok:lombok'
		annotationProcessor 'org.projectlombok:lombok'
		// 환경변수
		implementation 'io.github.cdimascio:dotenv-java:3.0.0'
		// swagger
		implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
		// security(근데 얘가 여기에 있는게 맞나?)
		implementation 'org.springframework.boot:spring-boot-starter-security'
		// jwt
		implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
		runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
		runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
		// jpa
		implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	}

	tasks.withType(JavaCompile) {
		options.encoding = 'UTF-8'
	}

	tasks.named('test') {
		useJUnitPlatform()
	}

	// 공통 테스트 환경 설정
	tasks.withType(Test).configureEach {
		doFirst {
			def envFile = rootProject.file('.env')
			if (envFile.exists()) {
				envFile.readLines()
						.findAll { it && !it.startsWith("#") && it.contains("=") }
						.each {
							def (key, value) = it.split("=", 2)
							systemProperty key.trim(), value.trim()
						}
			}
		}
	}
}