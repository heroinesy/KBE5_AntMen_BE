# .github/workflows/multi-arch-build-deploy.yml
name: Multi-Architecture Build & Deploy

on:
  push:
    branches: [main, develop, feature/#154-multi-arch-support]
  pull_request:
    branches: ["**"]
  workflow_dispatch:  # 수동 실행 가능

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        module: [m-admin, m-common, m-customer, m-manager]

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew :${{ matrix.module }}:bootJar -x test
        env:
          GRADLE_OPTS: "-Dorg.gradle.daemon=false"
          JAVA_OPTS: "-Xmx2048m"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create ECR repository if not exists
        run: |
          aws ecr describe-repositories --repository-names ${{ matrix.module }} || \
          aws ecr create-repository --repository-name ${{ matrix.module }}

      - name: Build and push multi-architecture Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --push \
            --tag $ECR_REGISTRY/${{ matrix.module }}:$IMAGE_TAG \
            --tag $ECR_REGISTRY/${{ matrix.module }}:latest \
            -f ${{ matrix.module }}/Dockerfile \
            ./${{ matrix.module }}/

      - name: Upload build reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-reports-${{ matrix.module }}
          path: ${{ matrix.module }}/build/reports/
          if-no-files-found: warn

  notify:
    runs-on: ubuntu-latest
    needs: build
    if: always()
    steps:
      - name: Notify on failure
        if: needs.build.result == 'failure'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            if (context.eventName === 'pull_request') {
              const { owner, repo } = context.repo;
              const branch = context.payload.pull_request.head.ref;
              const commit = context.sha;
              const commitUrl = `https://github.com/${owner}/${repo}/commit/${commit}`;

              let message = `❌ 멀티 아키텍처 빌드 실패\n\n`;
              message += `브랜치: ${branch}\n`;
              message += `커밋: ${commitUrl}\n`;
              message += `작업자: ${context.actor}\n\n`;
              message += `빌드가 실패했습니다. GitHub Actions 로그를 확인해주세요.`;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: owner,
                repo: repo,
                body: message
              });
            }

      - name: Notify on success
        if: needs.build.result == 'success'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            if (context.eventName === 'pull_request') {
              const { owner, repo } = context.repo;
              const branch = context.payload.pull_request.head.ref;
              const commit = context.sha;
              const commitUrl = `https://github.com/${owner}/${repo}/commit/${commit}`;

              let message = `✅ 멀티 아키텍처 빌드 성공\n\n`;
              message += `브랜치: ${branch}\n`;
              message += `커밋: ${commitUrl}\n`;
              message += `작업자: ${context.actor}\n\n`;
              message += `모든 모듈의 멀티 아키텍처 빌드가 완료되었습니다. (linux/amd64, linux/arm64)`;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: owner,
                repo: repo,
                body: message
              });
            }