name: Reusable Deploy to EC2

permissions:
  id-token: write
  contents: read

on:
  workflow_call:
    inputs:
      module:
        required: true
        type: string
      dockerfile_path:
        required: true
        type: string
      compose_service:
        required: true
        type: string
    secrets:
      ENV_IMAGE_NAME:
        required: true
      MYSQL_DATABASE:
        required: true
      MYSQL_HOST:
        required: true
      MYSQL_PASSWORD:
        required: true
      MYSQL_PORT:
        required: true
      MYSQL_USERNAME:
        required: true
      SPRING_DATABASE_URL:
        required: true
      ECR_REGISTRY:
        required: true
      AWS_REGION:
        required: true
      AWS_ROLE_TO_ASSUME:
        required: true
      EC2_PUBLIC_IP:
        required: true
      EC2_USERNAME:
        required: true
      EC2_SSH_KEY:
        required: true
      S3_BUCKET_NAME:
        required: true
      S3_REGION:
        required: true
      S3_ACCESS_KEY:
        required: true
      S3_SECRET_KEY:
        required: true
      JWT_SECRET:
        required: true
      GOOGLE_CLIENT_ID:
        required: true
      GOOGLE_CLIENT_SECRET:
        required: true
      GOOGLE_REDIRECT_URI:
        required: true
  workflow_dispatch:

jobs:
  build:
    name: ðŸ›  Build & Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Gradle Build
        run: ./gradlew :${{ inputs.module }}:bootJar -x test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create ECR repo if missing
        run: |
          aws ecr describe-repositories --repository-names ${{ inputs.module }} || \
          aws ecr create-repository --repository-name ${{ inputs.module }}

      - name: Build and Push Docker image
        run: |
          docker build -t ${{ secrets.ECR_REGISTRY }}/${{ inputs.module }}:latest \
            -f ${{ inputs.dockerfile_path }} ./${{ inputs.module }}
          docker push ${{ secrets.ECR_REGISTRY }}/${{ inputs.module }}:latest

  deploy:
    name: ðŸš€ Deploy to EC2
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Clear EC2 server folder
        uses: appleboy/ssh-action@v0.1.6
        with:
          #host: ${{ secrets.EC2_PUBLIC_IP }}
          host: 13.125.117.149
          #username: ${{ secrets.EC2_USERNAME }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo rm -rf ~/apps/server
            mkdir -p ~/apps/server
            sudo chown -R $USER:$USER ~/apps/server

      - name: Copy docker-compose.yml
        uses: appleboy/scp-action@v0.1.4
        with:
          #host: ${{ secrets.EC2_PUBLIC_IP }}
          host: 13.125.117.149
          #username: ${{ secrets.EC2_USERNAME }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "docker-compose.yml"
          target: ~/apps/server

      - name: Restart container
        uses: appleboy/ssh-action@v0.1.6
        with:
          #host: ${{ secrets.EC2_PUBLIC_IP }}
          host: 13.125.117.149
          #username: ${{ secrets.EC2_USERNAME }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ~/apps/server
            cat <<EOF > .env
            SPRING_PROFILES_ACTIVE=prod
            IMAGE_NAME=${{ secrets.ENV_IMAGE_NAME }}
            MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
            MYSQL_HOST=${{ secrets.MYSQL_HOST }}
            MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
            MYSQL_PORT=${{ secrets.MYSQL_PORT }}
            MYSQL_USERNAME=${{ secrets.MYSQL_USERNAME }}
            SPRING_DATABASE_URL=${{ secrets.SPRING_DATABASE_URL }}
            ECR_REGISTRY=${{ secrets.ECR_REGISTRY }}
            S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
            S3_REGION=${{ secrets.S3_REGION }}
            S3_ACCESS_KEY=${{ secrets.S3_ACCESS_KEY }}
            S3_SECRET_KEY=${{ secrets.S3_SECRET_KEY }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
            GOOGLE_REDIRECT_URI=${{ secrets.GOOGLE_REDIRECT_URI }}
            EOF

            echo "[Disk] Before cleanup"
            df -h /

            docker container prune -f
            docker image prune -f
            docker network prune -f

            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
              | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

            docker pull ${{ secrets.ECR_REGISTRY }}/${{ inputs.module }}:latest

            docker compose down ${{ inputs.compose_service }}
            docker compose up -d ${{ inputs.compose_service }}

            echo "=== Container Status ==="
            docker ps -a || true

            echo "=== Logs (${{ inputs.compose_service }}) ==="
            docker compose logs ${{ inputs.compose_service }} || true
